{
    "summary": "The code defines two classes, `LearningContext` and `ContextManager`, with instance variables for instructions and parameters. It initializes an empty context dictionary, stores Redis client and SQLAlchemy session objects, switches between contexts based on instruction sets, generates a context key, loads context from storage, and saves the context to storage.",
    "details": [
        {
            "comment": "This code defines two classes, `LearningContext` and `ContextManager`. The `LearningContext` class has instance variables for instructions and parameters. The `ContextManager` class initializes an empty dictionary of contexts and stores the current context as well as Redis client and SQLAlchemy session objects. It also contains methods to switch between contexts based on instruction sets, generate a context key using tupled instruction sets, and load context from storage (Redis) if it doesn't already exist in memory.",
            "location": "\"/media/root/Toshiba XG3/works/open_qstar/docs/src/open_qstar/context.py\":0-27",
            "content": "import pickle\nfrom open_qstar.db.pgsql import ContextModel\nclass LearningContext:\n    def __init__(self, instructions, parameters):\n        self.instructions = instructions\n        self.parameters = parameters\nclass ContextManager:\n    def __init__(self, redis_client, sqlalchemy_session):\n        self.contexts = {}\n        self.current_context = None\n        self.redis_client = redis_client\n        self.sqlalchemy_session = sqlalchemy_session\n    def switch_context(self, new_instruction_set):\n        context_key = self.generate_context_key(new_instruction_set)\n        if context_key in self.contexts:\n            self.current_context = self.contexts[context_key]\n        else:\n            self.current_context = self.load_context_from_storage(context_key, new_instruction_set)\n            self.contexts[context_key] = self.current_context\n    def generate_context_key(self, instruction_set):\n        return hash(tuple(instruction_set))\n    def load_context_from_storage(self, context_key, instruction_set):\n        cached_data = self.redis_client.get(context_key)"
        },
        {
            "comment": "This code initializes a LearningContext, retrieves and caches context data from Redis or PostgreSQL, and defines methods to save the context to storage.",
            "location": "\"/media/root/Toshiba XG3/works/open_qstar/docs/src/open_qstar/context.py\":28-50",
            "content": "        if cached_data:\n            return pickle.loads(cached_data)\n        context_data = self.sqlalchemy_session.query(ContextModel).filter_by(key=context_key).first()\n        if context_data:\n            self.redis_client.set(context_key, context_data.data)\n            return pickle.loads(context_data.data)\n        return LearningContext(instruction_set, self.initialize_parameters())\n    def save_context_to_storage(self, context_key, context_data):\n        # Serialize and save the context data to PostgreSQL and Redis\n        serialized_data = pickle.dumps(context_data)\n        self.redis_client.set(context_key, serialized_data)\n        db_context = ContextModel(key=context_key, data=serialized_data)\n        self.sqlalchemy_session.add(db_context)\n        self.sqlalchemy_session.commit()\n    def initialize_parameters(self):\n        # TODO Initialize model parameters for a new context\n        # ...\n        return parameters"
        }
    ]
}